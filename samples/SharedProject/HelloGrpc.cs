// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hello.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace FM.Demo {
  public static partial class HelloSrv
  {
    static readonly string __ServiceName = "demo.HelloSrv";

    static readonly grpc::Marshaller<global::FM.Demo.HiRequest> __Marshaller_HiRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FM.Demo.HiRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FM.Demo.HiResponse> __Marshaller_HiResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FM.Demo.HiResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::FM.Demo.HiRequest, global::FM.Demo.HiResponse> __Method_Hi = new grpc::Method<global::FM.Demo.HiRequest, global::FM.Demo.HiResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Hi",
        __Marshaller_HiRequest,
        __Marshaller_HiResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FM.Demo.HelloReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of HelloSrv</summary>
    public abstract partial class HelloSrvBase
    {
      public virtual global::System.Threading.Tasks.Task<global::FM.Demo.HiResponse> Hi(global::FM.Demo.HiRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HelloSrv</summary>
    public partial class HelloSrvClient : grpc::ClientBase<HelloSrvClient>
    {
      /// <summary>Creates a new client for HelloSrv</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HelloSrvClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HelloSrv that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HelloSrvClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HelloSrvClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HelloSrvClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::FM.Demo.HiResponse Hi(global::FM.Demo.HiRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Hi(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::FM.Demo.HiResponse Hi(global::FM.Demo.HiRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Hi, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::FM.Demo.HiResponse> HiAsync(global::FM.Demo.HiRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HiAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::FM.Demo.HiResponse> HiAsync(global::FM.Demo.HiRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Hi, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HelloSrvClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HelloSrvClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HelloSrvBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Hi, serviceImpl.Hi).Build();
    }

  }
}
#endregion
